"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Summary = void 0;
const core_1 = require("@serenity-js/core");
const model_1 = require("@serenity-js/core/lib/model");
/**
 * @package
 */
class Summary {
    constructor() {
        this.records = [];
        this.testRunStartedAt = new core_1.Timestamp();
        this.testRunFinishedAt = new core_1.Timestamp();
    }
    record(details, outcome, duration) {
        this.records.push({ details, outcome, duration });
    }
    aggregated() {
        return this.records.reduce((acc, record) => {
            acc.totalTime = acc.totalTime.plus(record.duration);
            const categoryName = record.details.category.value;
            if (!acc.categories[categoryName]) {
                acc.categories[categoryName] = {
                    name: categoryName,
                    outcomes: {
                        [model_1.ExecutionCompromised.name]: { count: 0, code: model_1.ExecutionCompromised.Code },
                        [model_1.ExecutionFailedWithError.name]: { count: 0, code: model_1.ExecutionFailedWithError.Code },
                        [model_1.ExecutionFailedWithAssertionError.name]: { count: 0, code: model_1.ExecutionFailedWithAssertionError.Code },
                        [model_1.ImplementationPending.name]: { count: 0, code: model_1.ImplementationPending.Code },
                        [model_1.ExecutionSkipped.name]: { count: 0, code: model_1.ExecutionSkipped.Code },
                        [model_1.ExecutionIgnored.name]: { count: 0, code: model_1.ExecutionIgnored.Code },
                        [model_1.ExecutionSuccessful.name]: { count: 0, code: model_1.ExecutionSuccessful.Code },
                    },
                    totalTime: core_1.Duration.ofMilliseconds(0),
                };
            }
            acc.categories[categoryName].outcomes[record.outcome.constructor.name].count++;
            acc.categories[categoryName].totalTime = acc.categories[categoryName].totalTime.plus(record.duration);
            return acc;
        }, {
            categories: {},
            totalTime: core_1.Duration.ofMilliseconds(0),
            realTime: this.testRunFinishedAt.diff(this.testRunStartedAt),
            numberOfScenarios: this.records.length
        });
    }
    recordTestRunStartedAt(timestamp) {
        this.testRunStartedAt = timestamp;
    }
    recordTestRunFinishedAt(timestamp) {
        this.testRunFinishedAt = timestamp;
    }
}
exports.Summary = Summary;
//# sourceMappingURL=Summary.js.map