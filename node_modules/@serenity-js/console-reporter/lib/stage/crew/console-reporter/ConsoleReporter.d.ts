import { ListensToDomainEvents, Stage, StageCrewMemberBuilder } from '@serenity-js/core';
import { DomainEvent } from '@serenity-js/core/lib/events';
import { ConsoleReporterConfig } from './ConsoleReporterConfig';
import { Printer } from './Printer';
import { TerminalTheme } from './themes';
/**
 * A {@apilink StageCrewMember} that uses [standard output](https://en.wikipedia.org/wiki/Standard_streams)
 * to report on progress of your Serenity/JS acceptance tests.
 *
 * `ConsoleReporter` ships with colour themes for both dark and light terminals,
 * as well as a monochromatic theme for those moments when you're in a noir mood
 * (or have a terminal that doesn't support colours, like the good old `cmd.exe` on Windows).
 *
 * ## Registering the reporter programmatically
 *
 * ```ts
 *  import { configure } from '@serenity-js/core';
 *  import { ConsoleReporter } from '@serenity-js/console-reporter';
 *
 *  configure({
 *    crew: [
 *      ConsoleReporter.withDefaultColourSupport()
 *    ],
 *  });
 * ```
 *
 * ## Redirecting output to a file
 *
 * ```ts
 *  import { configure } from '@serenity-js/core';
 *  import { ConsoleReporter } from '@serenity-js/console-reporter';
 *  import { createWriteStream } from 'fs';
 *
 *  configure({
 *      outputStream: createWriteStream('./output.log'),
 *      crew: [ ConsoleReporter.withDefaultColourSupport() ],
 *  });
 *  ```
 * ## Registering the reporter with WebdriverIO
 *
 * ```ts
 * // wdio.conf.ts
 * import { ConsoleReporter } from '@serenity-js/console-reporter';
 * import { WebdriverIOConfig } from '@serenity-js/webdriverio';
 *
 * export const config: WebdriverIOConfig = {
 *
 *   framework: '@serenity-js/webdriverio',
 *
 *   serenity: {
 *     crew: [
 *       ConsoleReporter.forDarkTerminals(),
 *     ]
 *     // other Serenity/JS config
 *   },
 *
 *  // other WebdriverIO config
 * }
 * ```
 *
 * ## Registering the reporter with Protractor
 *
 * ```js
 * // protractor.conf.js
 * const { ConsoleReporter } = require('@serenity-js/console-reporter');
 *
 * exports.config = {
 *   framework:     'custom',
 *   frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *   serenity: {
 *     crew: [
 *       ConsoleReporter.withDefaultColourSupport(),
 *     ],
 *     // other Serenity/JS config
 *   },
 *
 *   // other Protractor config
 * }
 * ```
 *
 * @public
 *
 * @group Stage
 */
export declare class ConsoleReporter implements ListensToDomainEvents {
    private readonly printer;
    private readonly theme;
    private readonly stage?;
    private startTimes;
    private artifacts;
    private summary;
    private readonly firstErrors;
    private readonly summaryFormatter;
    private readonly eventQueues;
    static fromJSON(config: ConsoleReporterConfig): StageCrewMemberBuilder<ConsoleReporter>;
    /**
     * Instantiates a `ConsoleReporter` that auto-detects
     * your terminal's support for colours and uses a colour theme
     * for dark terminals if successful.
     *
     * Please note that spawning your test process from another process
     * (by using [npm-failsafe](https://www.npmjs.com/package/npm-failsafe), for example)
     * causes the `ConsoleReporter` to use the monochromatic colour scheme,
     * as colour support can't be detected in child processes.
     */
    static withDefaultColourSupport(): StageCrewMemberBuilder<ConsoleReporter>;
    /**
     * Instantiates a `ConsoleReporter` with a monochromatic colour theme.
     * Good for terminals with no colour support (like the `cmd.exe` on Windows),
     * or for times when you need to pipe the output to a text file and want
     * to avoid printing control characters.
     */
    static forMonochromaticTerminals(): StageCrewMemberBuilder<ConsoleReporter>;
    /**
     * Instantiates a `ConsoleReporter` with a colour theme optimised for terminals with dark backgrounds.
     */
    static forDarkTerminals(): StageCrewMemberBuilder<ConsoleReporter>;
    /**
     * Instantiates a `ConsoleReporter` with a colour theme optimised for terminals with light backgrounds.
     */
    static forLightTerminals(): StageCrewMemberBuilder<ConsoleReporter>;
    private static theme;
    /**
     * @param {Printer} printer
     * @param {TerminalTheme} theme
     * @param {Stage} [stage=undefined]
     */
    constructor(printer: Printer, theme: TerminalTheme, stage?: Stage);
    /**
     * Handles {@apilink DomainEvent} objects emitted by the {@apilink Stage}.
     *
     * @see {@apilink StageCrewMember}
     *
     * @listens {DomainEvent}
     *
     * @param {DomainEvent} event
     */
    notifyOf(event: DomainEvent): void;
    private printTestRunErrorOutcome;
    private printScene;
    private printSummary;
    private isSceneSpecific;
    private formattedOutcome;
    private deCamelCased;
    private iconFrom;
}
//# sourceMappingURL=ConsoleReporter.d.ts.map