"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldProxy = exports.axiosClient = void 0;
const core_1 = require("@serenity-js/core");
const axios_1 = __importDefault(require("axios"));
const fs = __importStar(require("fs"));
const https = __importStar(require("https"));
const url_1 = require("url");
const HttpsProxyAgent = require('https-proxy-agent'); // eslint-disable-line @typescript-eslint/no-var-requires
/**
 * @package
 */
function axiosClient(repository, ignoreSsl, env, repositoryAuth) {
    const configuredProxy = isHttps(repository.protocol)
        ? firstNonEmpty(env, 'npm_config_https_proxy', 'https_proxy', 'HTTPS_PROXY')
        : firstNonEmpty(env, 'npm_config_proxy', 'npm_config_http_proxy', 'http_proxy', 'HTTP_PROXY');
    const configuredNoProxy = firstNonEmpty(env, 'npm_config_noproxy', 'no_proxy', 'NO_PROXY');
    const configuredCa = certificationAuthority(env);
    const rejectUnauthorized = shouldRejectUnauthorizedCertificates(env, ignoreSsl);
    const options = {
        baseURL: repository.toString(),
        adapter: ['http'],
        auth: repositoryAuth,
    };
    if (isHttps(repository.protocol)) {
        options.proxy = false;
        options.httpsAgent = shouldProxy(repository, configuredProxy, configuredNoProxy)
            ? proxiedHttpsAgent(proxyConfigFrom(configuredProxy), configuredCa, rejectUnauthorized)
            : httpsAgent(configuredCa, rejectUnauthorized);
    }
    else {
        options.proxy = shouldProxy(repository, configuredProxy, configuredNoProxy)
            ? proxyConfigFrom(configuredProxy)
            : undefined;
    }
    if (env.npm_config_user_agent) {
        options.headers = { 'User-Agent': env.npm_config_user_agent };
    }
    return axios_1.default.create(options);
}
exports.axiosClient = axiosClient;
/**
 * @package
 */
function shouldProxy(url, configuredProxy, configuredNoProxy) {
    // there's no proxy configured so don't proxy...
    if (!configuredProxy.value) {
        return false;
    }
    const noProxyDomains = (configuredNoProxy.value || '').split(',').map(_ => _.trim());
    return !noProxyDomains.some(noProxyDomain => {
        if (!noProxyDomain) {
            return false;
        }
        if (noProxyDomain === '*') {
            return true;
        }
        if (noProxyDomain[0] === '.' && url.hostname.slice(url.hostname.length - noProxyDomain.length) === noProxyDomain) {
            return true;
        }
        return url.hostname === noProxyDomain;
    });
}
exports.shouldProxy = shouldProxy;
function proxyConfigFrom(proxyUrl) {
    if (!proxyUrl || !proxyUrl.value) {
        return undefined;
    }
    let parsed;
    try {
        parsed = new url_1.URL(proxyUrl.value);
    }
    catch (error) {
        throw new core_1.ConfigurationError(`Env variable ${proxyUrl.name}=${proxyUrl.value} should specify a valid URL`, error);
    }
    if (!isSupportedProtocol(parsed.protocol)) {
        throw new core_1.ConfigurationError(`Env variable ${proxyUrl.name}=${proxyUrl.value} should specify protocol to be used, i.e. http:// or https://`);
    }
    return {
        protocol: parsed.protocol,
        host: parsed.hostname,
        port: parsed.port
            ? Number.parseInt(parsed.port, 10)
            : (isHttps(parsed.protocol) ? 443 : 80),
        auth: (parsed.password || parsed.username) ? {
            password: parsed.password,
            username: parsed.username,
        } : undefined,
    };
}
function shouldRejectUnauthorizedCertificates(env, ignoreSsl) {
    return !ignoreSsl
        || env.npm_config_strict_ssl === 'true';
}
function proxiedHttpsAgent(proxyConfig, ca, rejectUnauthorized) {
    return new HttpsProxyAgent({ ca, rejectUnauthorized, ...proxyConfig });
}
function httpsAgent(ca, rejectUnauthorized) {
    return new https.Agent({ ca, rejectUnauthorized, });
}
function certificationAuthority(env) {
    // old school, the value is specified in the env var itself
    if (env.npm_config_ca) {
        return env.npm_config_ca;
    }
    if (env.npm_config_cafile) {
        try {
            return fs.readFileSync(env.npm_config_cafile, { encoding: 'utf8' });
        }
        catch (error) {
            throw new core_1.ConfigurationError(`Could not read npm_config_cafile at ${env.npm_config_cafile}`, error);
        }
    }
    return undefined;
}
function firstNonEmpty(env, ...candidateVariables) {
    const found = candidateVariables.find(value => !!env[value]);
    return found
        ? { name: found, value: env[found] }
        : {};
}
function isSupportedProtocol(protocol) {
    return ['http:', 'https:', 'socks4:', 'socks5:']
        .find(supported => supported === protocol);
}
function isHttps(urlOrProtocol) {
    return urlOrProtocol
        && urlOrProtocol.startsWith('https:');
}
//# sourceMappingURL=axiosClient.js.map