"use strict";
const assertions_1 = require("@serenity-js/assertions");
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const url_1 = require("url");
const defaults_1 = require("../defaults");
const io_2 = require("../io");
const model_1 = require("../model");
const Printer_1 = require("../Printer");
const screenplay_1 = require("../screenplay");
const stage_1 = require("../stage");
const yargs = require('yargs'); // eslint-disable-line @typescript-eslint/no-var-requires
module.exports = {
    command: 'update',
    desc: 'Makes sure the Serenity BDD CLI jar file is available and up to date',
    builder: {
        cacheDir: {
            default: defaults_1.defaults.cacheDir,
            describe: 'A relative path to where the Serenity BDD CLI jar file should be stored',
        },
        ignoreSSL: {
            default: false,
            type: 'boolean',
            describe: 'Ignore SSL certificates',
        },
        repository: {
            default: defaults_1.defaults.repository,
            describe: 'Maven repository url where we should look for the Serenity BDD CLI artifact',
        },
        auth: {
            describe: `Credentials to authenticate with your repository - "<username>:<password>"`,
        },
        artifact: {
            default: defaults_1.defaults.artifact,
            describe: `The GAV identifier of the Serenity BDD CLI artifact to use; You're best off with the default option unless you want to experiment.`,
        },
    },
    handler: async (argv) => {
        const printer = new Printer_1.Printer(process.stdout, process.stderr), artifactGAV = model_1.GAV.fromString(argv.artifact), pathToArtifact = new io_1.Path(argv.cacheDir).join(artifactGAV.toPath()), repository = new url_1.URL(argv.repository);
        (0, core_1.configure)({
            actors: new stage_1.UpdateCommandActors(new io_1.Path(process.cwd()), () => (0, io_2.axiosClient)(repository, Boolean(argv.ignoreSSL), process.env, model_1.Credentials.fromString(argv.auth))),
            crew: [
                new stage_1.NotificationReporter(printer),
                new stage_1.ProgressReporter(printer),
            ],
        });
        const actor = (0, core_1.actorCalled)('Serenity/JS Updater');
        try {
            await (0, core_1.actorCalled)('Serenity/JS Updater').attemptsTo(core_1.Check.whether(screenplay_1.FileExists.at(pathToArtifact), (0, assertions_1.isTrue)())
                .andIfSo(screenplay_1.Notify.that(`Looks like you're good to go! Serenity BDD CLI is already at ${pathToArtifact.value}`))
                .otherwise(screenplay_1.DownloadArtifact
                .identifiedBy(artifactGAV)
                .availableFrom(repository)
                .to(pathToArtifact.directory())));
            await actor.dismiss();
        }
        catch (error) {
            printer.error((0, io_2.formatError)(error));
            yargs.exit(1, error.message);
        }
    },
};
//# sourceMappingURL=update.js.map