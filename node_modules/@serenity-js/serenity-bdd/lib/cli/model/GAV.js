"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GAV = void 0;
const io_1 = require("@serenity-js/core/lib/io");
const tiny_types_1 = require("tiny-types");
/**
 * @package
 */
class GAV extends tiny_types_1.TinyType {
    static fromString(gav) {
        const parts = gav.split(':');
        (0, tiny_types_1.ensure)('GAV segments', parts, (0, tiny_types_1.property)('length', (0, tiny_types_1.isInteger)(), (0, tiny_types_1.isInRange)(3, 5)));
        switch (parts.length) {
            case 5: return new GAV(parts[0], parts[1], parts[4], parts[2], parts[3]);
            case 4: return new GAV(parts[0], parts[1], parts[3], parts[2]);
            default: return new GAV(parts[0], parts[1], parts[2]);
        }
    }
    constructor(groupId, artifactId, version, extension = 'jar', classifier) {
        super();
        this.groupId = groupId;
        this.artifactId = artifactId;
        this.version = version;
        this.extension = extension;
        this.classifier = classifier;
        (0, tiny_types_1.ensure)('groupId', groupId, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.matches)(/^[a-z][\d_a-z-]+(?:\.[\d_a-z-]+)+[\d_a-z-]$/));
        (0, tiny_types_1.ensure)('artifactId', artifactId, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.matches)(/^[\d_a-z-]+$/));
        (0, tiny_types_1.ensure)('version', version, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.matches)(/^(?:\d+\.?){3}$/));
        (0, tiny_types_1.ensure)('extension', extension, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.matches)(/^[a-z]+$/));
    }
    toPath() {
        const name = [
            this.artifactId,
            this.version,
            this.classifier,
        ].filter(s => !!s).join('-');
        return new io_1.Path(`${name}.${this.extension}`);
    }
}
exports.GAV = GAV;
//# sourceMappingURL=GAV.js.map