"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaExecutable = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const path = __importStar(require("path")); // eslint-disable-line unicorn/import-style
const util_1 = require("util");
const findJavaHome = (0, util_1.promisify)(require('find-java-home')); // eslint-disable-line  @typescript-eslint/no-var-requires
/**
 * @package
 */
class JavaExecutable extends core_1.Question {
    constructor() {
        super();
        this.subject = `java executable`;
    }
    answeredBy(actor) {
        return findJavaHome({ allowJre: true })
            .then(pathToJavaHome => path.join(pathToJavaHome, 'bin', this.javaFileName()))
            .then(io_1.Path.fromJSON);
    }
    /**
     * @desc
     *  Changes the description of this question's subject.
     *
     * @param {string} subject
     * @returns {Question<T>}
     */
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
    javaFileName() {
        return this.isWindows()
            ? 'java.exe'
            : 'java';
    }
    isWindows() {
        return process.platform.indexOf('win') === 0;
    }
}
exports.JavaExecutable = JavaExecutable;
//# sourceMappingURL=JavaExecutable.js.map