"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorReportFrom = void 0;
/* eslint-disable @typescript-eslint/ban-types */
const core_1 = require("@serenity-js/core");
const ansi_regex_1 = __importDefault(require("ansi-regex"));
const util_1 = require("util");
/** @package */
function errorReportFrom(error) {
    return {
        ...errorDetailsOf(error),
        ...(error instanceof core_1.RuntimeError && error.cause)
            ? { rootCause: errorReportFrom(error.cause) }
            : {},
    };
}
exports.errorReportFrom = errorReportFrom;
/** @package */
function errorDetailsOf(maybeError) {
    return {
        errorType: errorTypeOf(maybeError),
        message: errorMessageOf(maybeError).replace((0, ansi_regex_1.default)(), ''),
        stackTrace: errorStackOf(maybeError),
    };
}
/** @package */
function errorTypeOf(maybeError) {
    if (!isDefined(maybeError)) {
        return `${maybeError}`;
    }
    return maybeError.constructor.name;
}
/** @package */
function errorMessageOf(maybeError) {
    if (!isDefined(maybeError)) {
        return '';
    }
    if (typeof maybeError === 'string') {
        return maybeError;
    }
    if (is(maybeError, Error) && isDefined(maybeError.message)) {
        return maybeError.message;
    }
    return (0, util_1.inspect)(maybeError);
}
function errorStackOf(maybeError) {
    if (isDefined(maybeError) && isDefined(maybeError.stack)) {
        const parser = new core_1.ErrorStackParser();
        return parser.parse(maybeError).map(frame => ({
            declaringClass: '',
            methodName: frame.functionName ? `${frame.functionName}(${(frame.args || []).join(', ')})` : '',
            fileName: frame.fileName,
            lineNumber: frame.lineNumber,
        }));
    }
    return [];
}
/** @package */
function isDefined(maybeError) {
    return maybeError !== null
        && maybeError !== undefined;
}
/** @package */
function is(maybeError, type) {
    return isDefined(maybeError)
        && maybeError instanceof type;
}
//# sourceMappingURL=errorReportFrom.js.map