"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tagOf = void 0;
const model_1 = require("@serenity-js/core/lib/model");
const tiny_types_1 = require("tiny-types");
const objects_1 = require("tiny-types/lib/objects");
const reportIdIncluding_1 = require("./reportIdIncluding");
/**
 * @package
 */
function tagOf(tag) {
    return (context) => (0, tiny_types_1.match)(tag)
        .when(model_1.ManualTag, _ => {
        context.report.manual = true;
        context.report.tags = concatIfNotPresent(context.report.tags, tagReportFor(tag));
        return context;
    })
        .when(model_1.ThemeTag, _ => {
        const themeTag = {
            ...tagReportFor(tag),
            displayName: tag.name,
        };
        context.report.tags = concatIfNotPresent(context.report.tags, themeTag);
        return context;
    })
        .when(model_1.CapabilityTag, _ => {
        const capabilityTag = {
            ...tagReportFor(tag),
            name: join('/', displayNameOfRecorded(model_1.ThemeTag, context.report.tags), tag.name),
            displayName: tag.name,
        };
        context.report.tags = concatIfNotPresent(context.report.tags, capabilityTag);
        return context;
    })
        .when(model_1.FeatureTag, _ => {
        const featureTag = {
            ...tagReportFor(tag),
            name: join('/', displayNameOfRecorded(model_1.CapabilityTag, context.report.tags), tag.name),
            displayName: tag.name,
        };
        context.report.featureTag = featureTag;
        context.report.tags = concatIfNotPresent(context.report.tags, featureTag);
        return context;
    })
        .when(model_1.IssueTag, _ => {
        context.report.issues = concatIfNotPresent(context.report.issues, tag.name);
        context.report.additionalIssues = concatIfNotPresent(context.report.additionalIssues, tag.name);
        context.report.tags = concatIfNotPresent(context.report.tags, tagReportFor(tag));
        return context;
    })
        .when(model_1.BrowserTag, (browserTag) => {
        (0, reportIdIncluding_1.reportIdIncluding)(browserTag.name)(context);
        // todo: simplify browser name
        //  https://github.com/serenity-bdd/serenity-core/blob/8bf783fa732d49012f546ad0f8352ace4640ccc6/serenity-model/src/main/java/net/thucydides/core/model/ContextIcon.java#L11
        context.report.context = appendIfNotPresent(context.report.context, simplifyBrowserName(browserTag.browserName));
        context.report.driver = browserTag.browserName;
        context.report.tags = concatIfNotPresent(context.report.tags, tagReportFor(browserTag));
        return context;
    })
        .when(model_1.PlatformTag, (platformTag) => {
        (0, reportIdIncluding_1.reportIdIncluding)(tag.name)(context);
        // todo: simplify platform name
        //  https://github.com/serenity-bdd/serenity-core/blob/master/serenity-model/src/main/java/net/thucydides/core/model/ContextIcon.java
        // https://github.com/serenity-bdd/serenity-core/blob/master/serenity-model/src/main/java/net/thucydides/core/model/ContextIcon.java
        context.report.context = appendIfNotPresent(context.report.context, simplifyPlatformName(platformTag.platformName) /* todo: toLowerCase? */);
        context.report.tags = concatIfNotPresent(context.report.tags, tagReportFor(platformTag));
        return context;
    })
        .when(model_1.ExecutionRetriedTag, _ => {
        (0, reportIdIncluding_1.reportIdIncluding)(tag.name)(context);
        context.report.tags = concatIfNotPresent(context.report.tags, tagReportFor(tag));
        return context;
    })
        .else(_ => {
        context.report.tags = concatIfNotPresent(context.report.tags, tagReportFor(tag));
        return context;
    });
}
exports.tagOf = tagOf;
function simplified(aliases) {
    return (actualName) => {
        const lowercasePlatformName = actualName.toLowerCase();
        const recognisedAlias = Object.entries(aliases)
            .find(entry => entry[1].some(alias => lowercasePlatformName.includes(alias)));
        return recognisedAlias
            ? recognisedAlias[0]
            : actualName;
    };
}
function simplifyPlatformName(platformName) {
    return simplified({
        linux: ['linux'],
        mac: ['darwin', 'mac', 'os x'],
        windows: ['windows'],
        android: ['android'],
        ios: ['ios'],
    })(platformName);
}
// https://wiki.saucelabs.com/display/DOCS/Platform+Configurator#/
// https://www.browserstack.com/automate/capabilities
function simplifyBrowserName(browserName) {
    return simplified({
        chrome: ['chrome', 'chromium'],
        firefox: ['firefox'],
        safari: ['safari', 'webkit'],
        opera: ['opera'],
        ie: ['internet explorer', 'explorer', 'ie'],
        edge: ['microsoftedge', 'edge'],
    })(browserName);
}
function concatIfNotPresent(items, item) {
    const currentTags = items || [];
    return currentTags.some(current => (0, objects_1.equal)(current, item))
        ? currentTags
        : currentTags.concat(item);
}
function appendIfNotPresent(commaSeparatedStringOrEmpty, item) {
    return unique((commaSeparatedStringOrEmpty || '')
        .split(',')
        .filter(_ => !!_)
        .concat(item)).join(',');
}
function tagReportFor(tag) {
    return {
        ...tag.toJSON(),
        displayName: tag.name.replace(/_+/, ' '),
    };
}
function join(separator, ...values) {
    return values.filter(_ => !!_).join(separator);
}
function unique(items) {
    return [...new Set(items)];
}
function displayNameOfRecorded(typeOfTag, tags) {
    const found = (tags || []).find(t => t.type === typeOfTag.Type);
    return found && found.displayName;
}
//# sourceMappingURL=tagOf.js.map