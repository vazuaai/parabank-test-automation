"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerenityBDDReporter = void 0;
const core_1 = require("@serenity-js/core");
const events_1 = require("@serenity-js/core/lib/events");
const model_1 = require("@serenity-js/core/lib/model");
const processors_1 = require("./processors");
/**
 * A {@apilink StageCrewMember} that produces [Serenity BDD](http://serenity-bdd.info/)-standard JSON reports
 * to be parsed by [Serenity BDD CLI Reporter](https://github.com/serenity-bdd/serenity-cli)
 * to produce HTML reports and living documentation.
 *
 * ## Registering the reporter programmatically
 *
 * ```ts
 * import { ArtifactArchiver, configure } from '@serenity-js/core';
 * import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';
 *
 * configure({
 *   crew: [
 *     ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *     new SerenityBDDReporter()
 *   ],
 * })
 * ```
 *
 * ## Registering the reporter using WebdriverIO configuration
 *
 * ```ts
 * // wdio.conf.ts
 * import { ArtifactArchiver } from '@serenity-js/core';
 * import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';
 * import { WebdriverIOConfig } from '@serenity-js/webdriverio';
 *
 * export const config: WebdriverIOConfig = {
 *
 *   framework: '@serenity-js/webdriverio',
 *
 *   serenity: {
 *     crew: [
 *         ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *         new SerenityBDDReporter(),
 *     ],
 *     // other Serenity/JS config
 *   },
 *   // other Protractor config
 * }
 * ```
 *
 * ## Registering the reporter using Protractor configuration
 *
 * ```js
 * // protractor.conf.js
 * const
 *   { ArtifactArchiver }    = require('@serenity-js/core'),
 *   { SerenityBDDReporter } = require('@serenity-js/serenity-bdd')
 *
 * exports.config = {
 *   framework:     'custom',
 *   frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *   serenity: {
 *     crew: [
 *       ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *       new SerenityBDDReporter(),
 *     ],
 *     // other Serenity/JS config
 *   },
 *
 *   // other Protractor config
 * }
 * ```
 *
 * @group Stage
 */
class SerenityBDDReporter {
    /**
     * @param [stage=undefined] stage
     */
    constructor(stage) {
        this.stage = stage;
        this.eventQueues = new core_1.DomainEventQueues();
        this.processors = new processors_1.EventQueueProcessors();
    }
    /**
     * @inheritDoc
     */
    assignedTo(stage) {
        this.stage = stage;
        return this;
    }
    /**
     * @inheritDoc
     */
    notifyOf(event) {
        if (this.isSceneSpecific(event)) {
            this.eventQueues.enqueue(event);
        }
        else if (event instanceof events_1.TestRunFinishes) {
            const id = model_1.CorrelationId.create();
            this.stage.announce(new events_1.AsyncOperationAttempted(new model_1.Name(this.constructor.name), new model_1.Description(`Generating Serenity BDD JSON reports...`), id, this.stage.currentTime()));
            try {
                this.processors
                    .process(this.eventQueues)
                    .forEach(result => {
                    this.stage.announce(new events_1.ArtifactGenerated(result.sceneId, result.name, result.artifact, this.stage.currentTime()));
                });
                this.stage.announce(new events_1.AsyncOperationCompleted(id, this.stage.currentTime()));
            }
            catch (error) {
                this.stage.announce(new events_1.AsyncOperationFailed(error, id, this.stage.currentTime()));
            }
        }
    }
    isSceneSpecific(event) {
        return Object.prototype.hasOwnProperty.call(event, 'sceneId');
    }
}
exports.SerenityBDDReporter = SerenityBDDReporter;
//# sourceMappingURL=SerenityBDDReporter.js.map