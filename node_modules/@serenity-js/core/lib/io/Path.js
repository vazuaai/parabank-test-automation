"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Path = void 0;
const filenamify_1 = __importDefault(require("filenamify"));
const tiny_types_1 = require("tiny-types");
const upath_1 = __importDefault(require("upath"));
class Path extends tiny_types_1.TinyType {
    static fromJSON(v) {
        return new Path(v);
    }
    static from(...segments) {
        return new Path(upath_1.default.joinSafe(...segments));
    }
    static fromSanitisedString(value) {
        const normalised = upath_1.default.normalize(value).replace(/["'/:\\]/gi, ''), extension = upath_1.default.extname(normalised), basename = upath_1.default.basename(normalised, extension), filename = (0, filenamify_1.default)(basename, { replacement: '-', maxLength: 250 })
            .trim()
            .replace(/[\s-]+/g, '-');
        return new Path(upath_1.default.join(upath_1.default.dirname(normalised), `${filename}${extension}`));
    }
    constructor(value) {
        super();
        (0, tiny_types_1.ensure)(Path.name, value, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.property)('length', (0, tiny_types_1.isGreaterThan)(0)));
        this.value = upath_1.default.normalize(value);
    }
    join(another) {
        return new Path(upath_1.default.join(this.value, another.value));
    }
    split() {
        return this.value
            .split(Path.Separator)
            .filter(segment => !!segment); // so that we ignore the trailing path separator in absolute paths
    }
    resolve(another) {
        return new Path(upath_1.default.resolve(this.value, another.value));
    }
    relative(another) {
        return new Path(upath_1.default.relative(this.value, another.value));
    }
    directory() {
        return new Path(upath_1.default.dirname(this.value));
    }
    basename() {
        return upath_1.default.basename(this.value);
    }
    isAbsolute() {
        return upath_1.default.isAbsolute(this.value);
    }
    root() {
        return new Path(upath_1.default.parse(this.value).root);
    }
}
exports.Path = Path;
Path.Separator = '/';
//# sourceMappingURL=Path.js.map